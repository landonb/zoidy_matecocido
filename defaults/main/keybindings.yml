---

# YOU: Set zoidy_matecocido_keybindings_bonus in your playbook's group_vars/.
zoidy_matecocido_keybindings_bonus: []

# YOU: Send file to the Gvim instance using its --servername.
# (lb): 'SAMPI' is just the arbitrary term that I use.
# 2021-02-21: See Home Fries environ: ${GVIM_OPEN_SERVERNAME:-SAMPI}
zoidy_matecocido_gvim_servername: 'SAMPI'
# YOU: Set zoidy_matecocido_keybindings_gvims in your playbook's group_vars/.
zoidy_matecocido_keybindings_gvims: []

# CXREF: zoidy_matecocido_keybindings_bonus
#        zoidy_matecocido_keybindings_gvims
zoidy_matecocido_keybindings_basic:

  # *** Keybindings defined below:
  #
  #   Super_L + a + Shift + Ctrl  Focus window and tab: Gmail Inbox
  #              ['  '''  '  '' — for parity w/ macOS Karabiner-Elements binding]
  #
  #   Super_L + t   New Chromium Browser window
  #
  #   Super_L + y   New Chrome Browser window
  #
  #   Super_L + f   Open File Manager (caja)
  #
  #   Super_L + g   Float Topmost Window [~center on a 1920x1080]
  #
  #   Super_L + i   Invert Screen Colors
  #
  #   Super_L + `      Bring gVim [fs] to front
  #   Super_L + [TAB]  Bring gVim [fs] to front
  #
  #   Super_L + p   Open or BTF browser tab: PowerThesaurus
  #
  #   Super_L + x   Open or BTF browser tab: Regex Dictionary
  #
  #   Super_L + m   Run tmux in mate-terminal window
  #
  #   Super_L + 1   Bring "Spotify" window to front [think !, like music]
  #
  #   Super_L + s   Bring "Messenger" window to front (Does not open new tab)
  #   + Shift + Ctrl [for parity w/ macOS Karabiner-Elements binding]
  #
  #   Super_L + k   Bring "Slack" application window to front
  #
  #   Super_L + -   Make *now* date (YYYY-MM-DD) pasteable (send to clipboard buffer).
  #
  #      Also Ctrl + minus, and
  #   Shift + Ctrl + minus, to feed YYYY-MM-DD-TT-tt into clippy.
  #
  #   Ctrl + Super_L + p   pwgen23 → clipboard
  #
  #   Ctrl + Shift + Super_L + KeyPad+   Resize and center active window
  #
  #   Super_L + d   dob it

  # *** Focus Email window/tab: Super_L + a

  - name: "'[Personal] Gmail'"
    # 2021-02-10: Trying for parity w/ macOS Karabiner-Elements [KE] binding.
    #  binding: "'<Mod4>a'"
    binding: "'<Primary><Shift><Mod4>a'"
    # Simple action when Gmail always active tab in its window:
    #   action: "'wmctrl -a \\\" - Gmail - \\\"'"
    # Using static landing tab, and also sleep because timing issue:
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"( wmctrl -a \\'Email & Calendar - \\' && sleep 0.13 && xdotool key \\'ctrl+Tab\\' ) || wmctrl -a \\' - Gmail - \\'\\\"'"

  # *** New Chromium window: Super_L + t

  - name: "'Chromium Browser'"
    binding: "'<Mod4>t'"
    # 2023-04-22: Name simplified in Linux Mint 21.1, vs. 19.3's:
    #  action: "'/usr/bin/chromium-browser'"
    action: "'/usr/bin/chromium'"

  # *** New Chrome window: Super_L + y

  # 2022-01-05: --profile-directory added to start with default user,
  #             and not the last-used profile. Which can be annoying.
  - name: "'Chrome Browser'"
    binding: "'<Mod4>y'"
    action: "'/opt/google/chrome/chrome --profile-directory=Default'"

  # *** New caja (file system) window: Super_L + f

  - name: "'File Manager'"
    binding: "'<Mod4>f'"
    action: "'caja {{ ansible_env.HOME }}/Downloads'"

  # *** Float topmost window: Super_L + g

  - name: "'Float Topmost Window'"
    binding: "'<Mod4>g'"
    action: "'wmctrl -r :ACTIVE: -e 0,395,115,1050,750'"

  # *** Invert Screen Colors (ew!): Super_L + i

  # ISOFF/2023-04-22: No longer works:
  #   $ ~/.local/bin/xrandr-invert-colors
  #   `RANDR Query Version' returned error -1
  #   error while init
  # - But don't care.
  #
  #  - name: "'Invert Screen Colors'"
  #    binding: "'<Mod4>i'"
  #    action: "'/bin/bash -c \\\"{{ ansible_env.HOME }}/.local/bin/xrandr-invert-colors\\\"'"

  # *** Focum gVim window: Super_L + `

  # Bring gVim to the foreground (based on Home Fries' `fs` alias,
  # when uses the SAMPI --servername convention).
  #
  #  - name: "'gVim [fs]'"
  #    binding: "'<Mod4>Escape'"
  #    action: "'xdotool search --name SAMPI windowactivate'"
  #
  # 2023-04-22: I've had it at Cmd-` for years...
  - name: "'gVim [fs]'"
    binding: "'<Mod4>grave'"
    action: "'xdotool search --name SAMPI windowactivate'"
  #
  # *** Focus gVim window: Super_L + TAB
  #
  # 2023-04-22: ... but Super_L+Tab, which is one Levenshtein unit from
  # Alt+Tab, might be more appealing.
  # - I added this option 2019-01-12 but couldn't tell you which binding
  #   I use more often (or exclusively?).
  - name: "'gVim [fs]'"
    binding: "'<Mod4>Tab'"
    action: "'xdotool search --name SAMPI windowactivate'"

  # [lb]: Use --new-window for the obvious reason of not changing any
  # existing browser windows you've got open (and, say, changing the
  # active tab, to your annoyance), but also so the browser is brought
  # to the front (so you don't have to alt-tab or otherwise find it
  # yourself, which happens if we call `sensible-browser` without the
  # option).

  # *** Focus or Open PowerThesaurus browser tab: Super_L + p

  - name: "'PowerThesaurus [tab]'"
    binding: "'<Mod4>p'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"wmctrl -a \\'Power Thesaurus - \\' || sensible-browser --new-window \\'https://www.powerthesaurus.org/\\' --profile-directory=Default\\\"'"

  # *** Focus or Open RegexDictionary browser tab: Super_L + x

  - name: "'Regex Dictionary [tab]'"
    binding: "'<Mod4>x'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"wmctrl -a \\'Regex Dictionary by Lou Hevly - \\' || sensible-browser --new-window \\'https://www.visca.com/regexdict/\\' --profile-directory=Default\\\"'"

  # *** Open new tmux mate-terminal: Super_L + m

  - name: "'tmux Window'"
    # BOO: I tried "'<Mod4>/'" "'<Mod4>\\/'" "'<Mod4>.'" but nothing!
    binding: "'<Mod4>m'"
    # - See the app-tmux.yml task, which builds and installs tmux to ~/.local/bin.
    # - See also ~/.profile, which updates PATH to include ~/.local/bin, so we can
    #   simply call `tmux` here, and not have to specify the full path.
    # - (lb): Unforunately, after ~/.profile updates LD_LIBRARY_PATH, something
    #   else resets it, so we have to include the path here (to user-local
    #   libevent and ncurses libraries).
    action: "'mate-terminal --geometry=130x48+402+8 -e \\\"bash -c \\'LD_LIBRARY_PATH={{ ansible_env.HOME }}/.local/lib tmux\\'\\\"'"

  # *** Focus Spotify application window: Super_L + s

  - name: "'Kick Out The Jams [Spotify]'"
    # Brings the Spotify application window to the front.
    binding: "'<Mod4>1'"
    # Argh: (lb): I give up, deferring to script, trying to delimit quotes
    # and dollar signs in dconf entries is frustrating, just shell out!
    action: "'{{ ansible_env.HOME }}/.homefries/bin/keybinding-focus-spotify'"

  # *** Focus Facebook Messenger browser tab: Super_L + d

  - name: "'[Facebook] Messenger'"
    # Brings the Facebook Messenger browser tab to the front.
    # 2021-02-10: Trying for parity w/ macOS Karabiner-Elements [KE] binding.
    #  binding: "'<Mod4>s'"
    binding: "'<Primary><Shift><Mod4>s'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"wmctrl -a \\'Messenger - \\' || ( wmctrl -a \\'Chat & Social - \\' && sleep 0.13 && xdotool key \\'ctrl+Tab\\' )\\\"'"
    # (lb): If you always had a Messenger tab active in some window somewhere,
    # this would be a simple action:
    #
    #   action: "'wmctrl -a \\\"Messenger - \\\"'"
    #
    # However, Facebook "blinks" the window title on new message, which can
    # be very distracting if you're not checking messages immediately when
    # they're received. (Moreover, I think it's rather rude and intrusive.
    # I realize the behavior ensures that you know you have unread messages,
    # but why couldn't it be more like Gmail and just indicate the number of
    # new messages in parentheses in the window title?)
    #
    # Because of this, and so that I can leave my Messenger window open and
    # in its spot in the mate-panel window list, I like to check messages,
    # but then I'll park the browser window on a static tab. The static tab
    # is simply a blank page I've got saved on my filesystem, which is titled,
    # 'Chat & Social' (a hint to what tabs I have loaded in that browser window,
    # which is especially useful because mate-panels has been crashing of late,
    # and I sometimes find myself manually dragging windows icons back to their
    # proper window list positions, so having labeled windows helps).
    #
    # In short, I can check messages at my leisure, and I'm not annoyed by a
    # blinking window title as soon as I receive a new message. But now there's
    # extra work to bring Messenger to the front -- we might have to bring the
    # static page to the front and then switch tabs.
    #
    # 2020-01-04: There's a timing issue running this from a keybinding!
    # This snippet works fine from the command line,
    #   but not as a MATE keybinding.
    # If we call the implicit send-key command immediately:
    #     xdotool key 'ctrl+Tab'
    #   the key send has no effect.
    # If we get the window ID and try using that, still nothing:
    #     local window_id=$(xdotool search --name 'Chat & Social' | head -n 1)
    #     # local winid_hex=$(printf "0x%x" ${window_id})
    #     # Ensure exists:
    #     #   xwininfo -id $WINID_HEX | grep 'Chat & Social'
    #     xdotool key --window ${window_id} 'ctrl+Tab'
    #     # Chat & Social tab focused, but ctrl+Tab not received!
    # Fortunately, like all things uncontrollable, just wait for
    #   things to simmer down, then attack.
    # Note that I tried `sleep 0.05` but that didn't work.
    #   Using 0.1 seems to always work (so far, at least).
    #   Or maybe 0.13, I think I had one 0.1 slip through.

  #           ↓   ↓
  # *** Focus Slack: Super_L + k
  #           ↑   ↑

  - name: "'Slack'"
    binding: "'<Mod4>k'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"wmctrl -a \\'Slack |\\'\\\"'"

  # *** Date.now()/datetime.now(): Super_L + j

  # Put YYYY-MM-DD into clipboard register using Cmd+-.
  #
  # - Note: Use printf to avoid newline injection.
  # - Note: It's 'minus', not '-' (I.e., not: `binding: "'<Mod4>-'"`).
  - name: "'Now(TTT)'"
    binding: "'<Mod4>minus'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"printf \\$(date \\'+%Y-%m-%d\\') | xclip -selection c\\\"'"

  # Put YYYY-MM-DD-TT-tt into clipboard register using Cmd+(Mod)+-.
  #
  # (lb): I'd prefer just Super-Shift-minus for date with time, but MATE does
  #       not recognize Super-*Shift*, e.g., Super-Shift-minus does nothing
  #       for me (not even fallback on Super-minus).
  #       - E.g.,:
  #
  #         - name: "'Now(TTTtt)'"
  #           binding: "'<Shift><Mod4>minus'"
  #           action: "'…/bash -c \\\"printf \\$(date \\'+%Y-%m-%d-%H-%M\\') | xclip -selection c\\\"'"
  #
  #         (I also tried '<Shift><Mod4>_' and '<Shift><Mod4>underscore'
  #                          and '<Mod4>_' and        '<Mod4>underscore'
  #          but none of these worked, either.)
  #
  #       - So we'll use Ctrl-Super-minus for the date-plus-time-to-clipboard
  #         feature.
  #       - And MATE *does* recognize the Shift in Shift-Ctrl-Super-minus,
  #         so we can wire that to a modified date-plus-time.
  #         - The all-dashed date-plus-time, e.g., "2022-02-28-22-02",
  #           is good for filenames when you want to avoid spaces.
  #         - The normal date-plus-time, e.g., "2022-02-28 22:02",
  #           is good for adding date and time when using apps other
  #           than the terminal or Vim, say, Gmail.
  #­­
  # Dashed date-plus-time.
  - name: "'Now(TTTtt-)'"
    binding: "'<Primary><Mod4>minus'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"date \\'+%Y-%m-%d-%H-%M\\' | tr -d \\'\\n\\' | xclip -selection c\\\"'"
  #
  # Normal date plus:time.
  # - Note: Using printf with date input with a space gets tricky, e.g.,
  #           … bash -c \\\"printf \\$(date \\'+%Y-%m-%d\\') | xclip …
  #         becomes
  #           … bash -c \\\"printf \\$(date \\'+%Y-%m-%d %H:%M\\') | xclip …
  #         but the printf input is not quoted, so the time of day is not xclipped.
  #         So we'd need to quote the print input, e.g., something like
  #           … bash -c \\\"printf \\\\\"\\$(date \\'+%Y-%m-%d %H:%M\\')\\\\\" | xclip …
  #         but I couldn't get that to work.
  #         - Easier to skip the printf, and then use \`tr\` to strip the newline.
  - name: "'Now(TTTtt:)'"
    binding: "'<Primary><Mod4>semicolon'"
    # How it looks on dconf-dump:
    #   action="/home/puck/.local/bin/bash -c \"date '+%Y-%m-%d %H:%M' | tr -d '\n' | xclip -selection c\""
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"date \\'+%Y-%m-%d %H:%M\\' | tr -d \\'\\n\\' | xclip -selection c\\\"'"

  # *** pwgen23 to clippy: Super_L + Alt + p

  # Using printf to avoid the newline.
  - name: "'pwgen|xclip'"
    binding: "'<Alt><Mod4>p'"
    # CXREF: ~/.homefries/lib/alias/alias_pwgen.sh
    #   alias pwgen23='(pwgen 2 1 | tr -d '\''\n'\'' ; pwgen -n 21 -s -N 1 -y | tr -d '\''\n'\'' ; pwgen 2 1)'
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"printf \\$(pwgen 2 1 | tr -d \\'\\\\'\\'\\n\\'\\\\'\\' ; pwgen -n 21 -s -N 1 -y | tr -d \\'\\\\'\\'\\n\\'\\\\'\\' ; pwgen 2 1) | xclip -selection c\\\"'"

  # *** Resize and center active window: Ctrl + Shift + Super_L + KeyPad+
  #
  # ISOFF/2023-04-22: CXREF: See instead <Ctrl-Shift-Cmd-Numpad_5>'s 'move-to-center':
  #   ~/.kit/ansible/roles/zoidy_matecocido/tasks/mate-marco-window-keybindings.yml
  # - Also, reputed-tiler is retired-unsupported.
  #
  # # MEH: This binding using a script from an external dependency:
  # #        https://github.com/landonb/reputed-tiler
  # #      whose installation I have not wired from this Ansible playbook.
  # # SETUP: Get the reputed-tiler repo and install somewhere on PATH,
  # #        E.g., I installed it to ~/.local/bin/window-to-center via:
  # #          PREFIX=${HOME}/.local make link
  # - name: "window-to-center"
  #   # Where do you want it? Considering the existing
  #   # Ctrl-Shift-Cmd-* keyboard shortcuts managed by
  #   #   tasks/mate-marco-window-keybindings.yml
  #   # probably KP_Add is the best choice mnemonically
  #   # (stretch the window vertically and horizontally
  #   # from the center of the screen toward the edges)
  #   # although KP_Subtract seems like the easiest key
  #   # to press (left hand on the lower-leftmost three
  #   # keys, and right hand on the upper-rightmost key
  #   # (or nearabouts)). I prefer the mnemonically one.
  #   binding: "'<Primary><Shift><Mod4>KP_Add'"
  #   action: "'window-to-center'"

  # *** Focus dob terminal window: Super_L + d

  - name: "'dob sweet [dob]'"
    # Brings dob to the front.
    # CONVENTION: Assumes you're running the `dob edit` command, or that you
    # started a tmux session named 'ham'-something (e.g., 'hamsterdob'; note
    # that tmux truncates it after 3 letters and prefixes a box drawing heavy
    # triple dash vertical symbol, ┇, the Vim `3/` digraph).
    binding: "'<Mod4>d'"
    action: "'{{ ansible_env.HOME }}/.local/bin/bash -c \\\"wmctrl -a \\'┇ ham\\' ; wmctrl -a \\'dob edit\\'\\\"'"

